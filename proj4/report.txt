Group Members: Makenzie Johnson and Nicholas Wadinata

Makenzie: Created a file that generated random maps and created text files to hold different map sizes. Also worked
on the benchmark and answered the questions.

Nicholas: Worked on dijkstras.cpp, the benchmark, and answered the questions.


Questions:

1. How did you represent the map as a graph?

We used a 1D vector that represented a 2D vector (similarly to SuperBall where index = row * numCols + Col) 
to store the cost (weights) of leaving each node. We processed edges as we go in Dijkstra's by storing the 
coordinates of adjacent nodes (up, down, left, right) in a vector. However, in the event a node didn't exist
(i.e. top row doesn't have any adjacent nodes above), it would be stored as -1 in the vector.

2. What is complexity of your implementation of Dijkstra's Algorithm?

O(n + V + Elog(V))
We must visit all vertices once which is O(V) which is done using by checking if the distance is -1 before 
adding a vertex to the multimap, so each node is only added to the multimap once unless we find a shorter path.
We must also visit each edge once O(E), and when visiting each edge, we may need to add it to the multimap. 
Adding to the multimap is O(Elog(V)) in the worse case since we may have to iterate through all vertices
associated with a specific weight. Then, we used a vector to traverse backlinks (stored as coordinates) starting 
with the destination until we reach the starting vertex; this is O(n) rather than O(V) since the shortest path 
(assuming the map is always square) will never visit every single vertex.

3. How well does your implementation scale?

All of the maps ran extremely fast; all less than 1 second. But for memory usage, it wasn't too bad for the first few maps. 
However, we managed to allocate 76 millon bytes (76 MB) which is a lot for a simple file.
